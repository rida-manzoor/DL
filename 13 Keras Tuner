{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOrxlzaHUAFTCpcuFM+bzCT",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/rida-manzoor/DL/blob/main/Hyperparameter_tuning_in_NN.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "6DIhVFplza1e"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv(\"diabetes.csv\")\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "9ELNY-9o2BcV",
        "outputId": "754625e1-e02b-4af1-ca3d-a54b9781a9d0"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Pregnancies  Glucose  BloodPressure  SkinThickness  Insulin   BMI  \\\n",
              "0              6      148             72             35        0  33.6   \n",
              "1              1       85             66             29        0  26.6   \n",
              "2              8      183             64              0        0  23.3   \n",
              "3              1       89             66             23       94  28.1   \n",
              "4              0      137             40             35      168  43.1   \n",
              "..           ...      ...            ...            ...      ...   ...   \n",
              "763           10      101             76             48      180  32.9   \n",
              "764            2      122             70             27        0  36.8   \n",
              "765            5      121             72             23      112  26.2   \n",
              "766            1      126             60              0        0  30.1   \n",
              "767            1       93             70             31        0  30.4   \n",
              "\n",
              "     DiabetesPedigreeFunction  Age  Outcome  \n",
              "0                       0.627   50        1  \n",
              "1                       0.351   31        0  \n",
              "2                       0.672   32        1  \n",
              "3                       0.167   21        0  \n",
              "4                       2.288   33        1  \n",
              "..                        ...  ...      ...  \n",
              "763                     0.171   63        0  \n",
              "764                     0.340   27        0  \n",
              "765                     0.245   30        0  \n",
              "766                     0.349   47        1  \n",
              "767                     0.315   23        0  \n",
              "\n",
              "[768 rows x 9 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b29a9f47-5fa0-4585-a9b3-f72fbda624cc\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Pregnancies</th>\n",
              "      <th>Glucose</th>\n",
              "      <th>BloodPressure</th>\n",
              "      <th>SkinThickness</th>\n",
              "      <th>Insulin</th>\n",
              "      <th>BMI</th>\n",
              "      <th>DiabetesPedigreeFunction</th>\n",
              "      <th>Age</th>\n",
              "      <th>Outcome</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>6</td>\n",
              "      <td>148</td>\n",
              "      <td>72</td>\n",
              "      <td>35</td>\n",
              "      <td>0</td>\n",
              "      <td>33.6</td>\n",
              "      <td>0.627</td>\n",
              "      <td>50</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>85</td>\n",
              "      <td>66</td>\n",
              "      <td>29</td>\n",
              "      <td>0</td>\n",
              "      <td>26.6</td>\n",
              "      <td>0.351</td>\n",
              "      <td>31</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>8</td>\n",
              "      <td>183</td>\n",
              "      <td>64</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>23.3</td>\n",
              "      <td>0.672</td>\n",
              "      <td>32</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>89</td>\n",
              "      <td>66</td>\n",
              "      <td>23</td>\n",
              "      <td>94</td>\n",
              "      <td>28.1</td>\n",
              "      <td>0.167</td>\n",
              "      <td>21</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>137</td>\n",
              "      <td>40</td>\n",
              "      <td>35</td>\n",
              "      <td>168</td>\n",
              "      <td>43.1</td>\n",
              "      <td>2.288</td>\n",
              "      <td>33</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>763</th>\n",
              "      <td>10</td>\n",
              "      <td>101</td>\n",
              "      <td>76</td>\n",
              "      <td>48</td>\n",
              "      <td>180</td>\n",
              "      <td>32.9</td>\n",
              "      <td>0.171</td>\n",
              "      <td>63</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>764</th>\n",
              "      <td>2</td>\n",
              "      <td>122</td>\n",
              "      <td>70</td>\n",
              "      <td>27</td>\n",
              "      <td>0</td>\n",
              "      <td>36.8</td>\n",
              "      <td>0.340</td>\n",
              "      <td>27</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>765</th>\n",
              "      <td>5</td>\n",
              "      <td>121</td>\n",
              "      <td>72</td>\n",
              "      <td>23</td>\n",
              "      <td>112</td>\n",
              "      <td>26.2</td>\n",
              "      <td>0.245</td>\n",
              "      <td>30</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>766</th>\n",
              "      <td>1</td>\n",
              "      <td>126</td>\n",
              "      <td>60</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>30.1</td>\n",
              "      <td>0.349</td>\n",
              "      <td>47</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>767</th>\n",
              "      <td>1</td>\n",
              "      <td>93</td>\n",
              "      <td>70</td>\n",
              "      <td>31</td>\n",
              "      <td>0</td>\n",
              "      <td>30.4</td>\n",
              "      <td>0.315</td>\n",
              "      <td>23</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>768 rows × 9 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b29a9f47-5fa0-4585-a9b3-f72fbda624cc')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b29a9f47-5fa0-4585-a9b3-f72fbda624cc button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b29a9f47-5fa0-4585-a9b3-f72fbda624cc');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-9a034e13-107e-4396-bf9e-3709d6f98b15\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9a034e13-107e-4396-bf9e-3709d6f98b15')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-9a034e13-107e-4396-bf9e-3709d6f98b15 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_7d240c60-2c8a-46c8-aa26-d4106a13f3b7\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_7d240c60-2c8a-46c8-aa26-d4106a13f3b7 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x = df.iloc[:,:-1].values\n",
        "y = df.iloc[:,-1].values"
      ],
      "metadata": {
        "id": "CegeaV-A2Ige"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ry5atKkn2tMF",
        "outputId": "5e92d923-050c-41ce-ef87-f7990b681093"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[  6.   , 148.   ,  72.   , ...,  33.6  ,   0.627,  50.   ],\n",
              "       [  1.   ,  85.   ,  66.   , ...,  26.6  ,   0.351,  31.   ],\n",
              "       [  8.   , 183.   ,  64.   , ...,  23.3  ,   0.672,  32.   ],\n",
              "       ...,\n",
              "       [  5.   , 121.   ,  72.   , ...,  26.2  ,   0.245,  30.   ],\n",
              "       [  1.   , 126.   ,  60.   , ...,  30.1  ,   0.349,  47.   ],\n",
              "       [  1.   ,  93.   ,  70.   , ...,  30.4  ,   0.315,  23.   ]])"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eGVQ3h3I2t2n",
        "outputId": "0973026a-00fc-404f-ee9a-80b0d5e1a5a6"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0,\n",
              "       1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1,\n",
              "       0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0,\n",
              "       1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0,\n",
              "       1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1,\n",
              "       1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1,\n",
              "       1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,\n",
              "       1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1,\n",
              "       0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1,\n",
              "       1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1,\n",
              "       1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0,\n",
              "       1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0,\n",
              "       1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0,\n",
              "       0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0,\n",
              "       1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0,\n",
              "       0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,\n",
              "       0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0,\n",
              "       0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0,\n",
              "       0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1,\n",
              "       0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,\n",
              "       1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0,\n",
              "       0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0,\n",
              "       1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0,\n",
              "       1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,\n",
              "       0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0,\n",
              "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,\n",
              "       0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,\n",
              "       0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0,\n",
              "       0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0,\n",
              "       1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1,\n",
              "       0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1,\n",
              "       0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0,\n",
              "       0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0,\n",
              "       0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0,\n",
              "       1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0])"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Normalizing features\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "scalar = StandardScaler()"
      ],
      "metadata": {
        "id": "I-iMLGwA2uSa"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x = scalar.fit_transform(x)"
      ],
      "metadata": {
        "id": "axtQimVa27t3"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6Ohd1cSw3C9X",
        "outputId": "fb7fd024-7f65-4d8d-cd2a-0e40470bbc32"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 0.63994726,  0.84832379,  0.14964075, ...,  0.20401277,\n",
              "         0.46849198,  1.4259954 ],\n",
              "       [-0.84488505, -1.12339636, -0.16054575, ..., -0.68442195,\n",
              "        -0.36506078, -0.19067191],\n",
              "       [ 1.23388019,  1.94372388, -0.26394125, ..., -1.10325546,\n",
              "         0.60439732, -0.10558415],\n",
              "       ...,\n",
              "       [ 0.3429808 ,  0.00330087,  0.14964075, ..., -0.73518964,\n",
              "        -0.68519336, -0.27575966],\n",
              "       [-0.84488505,  0.1597866 , -0.47073225, ..., -0.24020459,\n",
              "        -0.37110101,  1.17073215],\n",
              "       [-0.84488505, -0.8730192 ,  0.04624525, ..., -0.20212881,\n",
              "        -0.47378505, -0.87137393]])"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=42)"
      ],
      "metadata": {
        "id": "BTqxztpk3Ihy"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import tensorflow\n",
        "from tensorflow import keras\n",
        "from tensorflow.keras import Sequential\n",
        "from keras.layers import Dense"
      ],
      "metadata": {
        "id": "YO-X8t3v3glx"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model = Sequential()"
      ],
      "metadata": {
        "id": "gIpLPuhQ31Oe"
      },
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model.add(Dense(32,activation='relu',input_dim=8))\n",
        "model.add(Dense(1,activation='sigmoid'))"
      ],
      "metadata": {
        "id": "mFN2UHgv355q"
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model.compile(optimizer='Adam',loss='binary_crossentropy',metrics=['accuracy'])"
      ],
      "metadata": {
        "id": "CIimzXEM4JqU"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model.fit(x_train,y_train,batch_size=32,epochs=70,validation_data=[x_test,y_test])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UxAnOfZy4d0q",
        "outputId": "56111d5d-2196-4e12-8ea8-e04d8fb71faf"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/70\n",
            "20/20 [==============================] - 2s 23ms/step - loss: 0.7279 - accuracy: 0.5098 - val_loss: 0.6866 - val_accuracy: 0.5779\n",
            "Epoch 2/70\n",
            "20/20 [==============================] - 0s 7ms/step - loss: 0.6636 - accuracy: 0.6156 - val_loss: 0.6385 - val_accuracy: 0.6494\n",
            "Epoch 3/70\n",
            "20/20 [==============================] - 0s 6ms/step - loss: 0.6181 - accuracy: 0.6596 - val_loss: 0.6034 - val_accuracy: 0.6688\n",
            "Epoch 4/70\n",
            "20/20 [==============================] - 0s 9ms/step - loss: 0.5841 - accuracy: 0.6857 - val_loss: 0.5761 - val_accuracy: 0.7143\n",
            "Epoch 5/70\n",
            "20/20 [==============================] - 0s 7ms/step - loss: 0.5586 - accuracy: 0.7117 - val_loss: 0.5589 - val_accuracy: 0.7208\n",
            "Epoch 6/70\n",
            "20/20 [==============================] - 0s 7ms/step - loss: 0.5385 - accuracy: 0.7280 - val_loss: 0.5446 - val_accuracy: 0.7468\n",
            "Epoch 7/70\n",
            "20/20 [==============================] - 0s 6ms/step - loss: 0.5227 - accuracy: 0.7427 - val_loss: 0.5334 - val_accuracy: 0.7662\n",
            "Epoch 8/70\n",
            "20/20 [==============================] - 0s 8ms/step - loss: 0.5097 - accuracy: 0.7476 - val_loss: 0.5256 - val_accuracy: 0.7662\n",
            "Epoch 9/70\n",
            "20/20 [==============================] - 0s 7ms/step - loss: 0.4993 - accuracy: 0.7573 - val_loss: 0.5199 - val_accuracy: 0.7597\n",
            "Epoch 10/70\n",
            "20/20 [==============================] - 0s 7ms/step - loss: 0.4915 - accuracy: 0.7557 - val_loss: 0.5148 - val_accuracy: 0.7532\n",
            "Epoch 11/70\n",
            "20/20 [==============================] - 0s 6ms/step - loss: 0.4847 - accuracy: 0.7622 - val_loss: 0.5118 - val_accuracy: 0.7727\n",
            "Epoch 12/70\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.4781 - accuracy: 0.7655 - val_loss: 0.5104 - val_accuracy: 0.7532\n",
            "Epoch 13/70\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4734 - accuracy: 0.7687 - val_loss: 0.5084 - val_accuracy: 0.7468\n",
            "Epoch 14/70\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4694 - accuracy: 0.7704 - val_loss: 0.5078 - val_accuracy: 0.7468\n",
            "Epoch 15/70\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4649 - accuracy: 0.7720 - val_loss: 0.5078 - val_accuracy: 0.7403\n",
            "Epoch 16/70\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.4616 - accuracy: 0.7752 - val_loss: 0.5074 - val_accuracy: 0.7468\n",
            "Epoch 17/70\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.4589 - accuracy: 0.7752 - val_loss: 0.5076 - val_accuracy: 0.7468\n",
            "Epoch 18/70\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4566 - accuracy: 0.7785 - val_loss: 0.5087 - val_accuracy: 0.7468\n",
            "Epoch 19/70\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4539 - accuracy: 0.7785 - val_loss: 0.5087 - val_accuracy: 0.7468\n",
            "Epoch 20/70\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.4518 - accuracy: 0.7850 - val_loss: 0.5105 - val_accuracy: 0.7403\n",
            "Epoch 21/70\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4502 - accuracy: 0.7850 - val_loss: 0.5111 - val_accuracy: 0.7338\n",
            "Epoch 22/70\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4488 - accuracy: 0.7850 - val_loss: 0.5135 - val_accuracy: 0.7273\n",
            "Epoch 23/70\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.4469 - accuracy: 0.7834 - val_loss: 0.5142 - val_accuracy: 0.7403\n",
            "Epoch 24/70\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4466 - accuracy: 0.7818 - val_loss: 0.5146 - val_accuracy: 0.7403\n",
            "Epoch 25/70\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4446 - accuracy: 0.7883 - val_loss: 0.5151 - val_accuracy: 0.7338\n",
            "Epoch 26/70\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.4433 - accuracy: 0.7899 - val_loss: 0.5151 - val_accuracy: 0.7338\n",
            "Epoch 27/70\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4424 - accuracy: 0.7899 - val_loss: 0.5171 - val_accuracy: 0.7338\n",
            "Epoch 28/70\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.4414 - accuracy: 0.7883 - val_loss: 0.5161 - val_accuracy: 0.7403\n",
            "Epoch 29/70\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.4402 - accuracy: 0.7980 - val_loss: 0.5166 - val_accuracy: 0.7403\n",
            "Epoch 30/70\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4395 - accuracy: 0.7948 - val_loss: 0.5170 - val_accuracy: 0.7468\n",
            "Epoch 31/70\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4381 - accuracy: 0.7948 - val_loss: 0.5186 - val_accuracy: 0.7403\n",
            "Epoch 32/70\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.4376 - accuracy: 0.7915 - val_loss: 0.5186 - val_accuracy: 0.7403\n",
            "Epoch 33/70\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4362 - accuracy: 0.7948 - val_loss: 0.5194 - val_accuracy: 0.7468\n",
            "Epoch 34/70\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.4355 - accuracy: 0.7915 - val_loss: 0.5206 - val_accuracy: 0.7468\n",
            "Epoch 35/70\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.4346 - accuracy: 0.7932 - val_loss: 0.5211 - val_accuracy: 0.7468\n",
            "Epoch 36/70\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.4339 - accuracy: 0.7964 - val_loss: 0.5201 - val_accuracy: 0.7532\n",
            "Epoch 37/70\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4331 - accuracy: 0.7932 - val_loss: 0.5218 - val_accuracy: 0.7532\n",
            "Epoch 38/70\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4325 - accuracy: 0.7980 - val_loss: 0.5223 - val_accuracy: 0.7532\n",
            "Epoch 39/70\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.4314 - accuracy: 0.7980 - val_loss: 0.5220 - val_accuracy: 0.7532\n",
            "Epoch 40/70\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4309 - accuracy: 0.7932 - val_loss: 0.5237 - val_accuracy: 0.7532\n",
            "Epoch 41/70\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4303 - accuracy: 0.7932 - val_loss: 0.5258 - val_accuracy: 0.7468\n",
            "Epoch 42/70\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.4296 - accuracy: 0.7948 - val_loss: 0.5251 - val_accuracy: 0.7532\n",
            "Epoch 43/70\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4286 - accuracy: 0.7932 - val_loss: 0.5246 - val_accuracy: 0.7532\n",
            "Epoch 44/70\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.4281 - accuracy: 0.7964 - val_loss: 0.5250 - val_accuracy: 0.7532\n",
            "Epoch 45/70\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.4269 - accuracy: 0.7964 - val_loss: 0.5255 - val_accuracy: 0.7532\n",
            "Epoch 46/70\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4262 - accuracy: 0.7964 - val_loss: 0.5252 - val_accuracy: 0.7532\n",
            "Epoch 47/70\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4257 - accuracy: 0.8013 - val_loss: 0.5265 - val_accuracy: 0.7597\n",
            "Epoch 48/70\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4252 - accuracy: 0.7997 - val_loss: 0.5263 - val_accuracy: 0.7532\n",
            "Epoch 49/70\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4246 - accuracy: 0.8029 - val_loss: 0.5274 - val_accuracy: 0.7532\n",
            "Epoch 50/70\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4240 - accuracy: 0.8029 - val_loss: 0.5280 - val_accuracy: 0.7532\n",
            "Epoch 51/70\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4238 - accuracy: 0.7997 - val_loss: 0.5282 - val_accuracy: 0.7532\n",
            "Epoch 52/70\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4227 - accuracy: 0.8029 - val_loss: 0.5296 - val_accuracy: 0.7532\n",
            "Epoch 53/70\n",
            "20/20 [==============================] - 0s 3ms/step - loss: 0.4219 - accuracy: 0.8029 - val_loss: 0.5289 - val_accuracy: 0.7532\n",
            "Epoch 54/70\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4214 - accuracy: 0.8046 - val_loss: 0.5297 - val_accuracy: 0.7532\n",
            "Epoch 55/70\n",
            "20/20 [==============================] - 0s 3ms/step - loss: 0.4208 - accuracy: 0.8062 - val_loss: 0.5302 - val_accuracy: 0.7532\n",
            "Epoch 56/70\n",
            "20/20 [==============================] - 0s 3ms/step - loss: 0.4204 - accuracy: 0.7997 - val_loss: 0.5305 - val_accuracy: 0.7532\n",
            "Epoch 57/70\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4198 - accuracy: 0.7997 - val_loss: 0.5314 - val_accuracy: 0.7662\n",
            "Epoch 58/70\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4195 - accuracy: 0.8013 - val_loss: 0.5323 - val_accuracy: 0.7662\n",
            "Epoch 59/70\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4188 - accuracy: 0.7997 - val_loss: 0.5320 - val_accuracy: 0.7532\n",
            "Epoch 60/70\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.4182 - accuracy: 0.7997 - val_loss: 0.5310 - val_accuracy: 0.7662\n",
            "Epoch 61/70\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4179 - accuracy: 0.8029 - val_loss: 0.5320 - val_accuracy: 0.7597\n",
            "Epoch 62/70\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.4171 - accuracy: 0.8013 - val_loss: 0.5338 - val_accuracy: 0.7468\n",
            "Epoch 63/70\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.4172 - accuracy: 0.8029 - val_loss: 0.5342 - val_accuracy: 0.7532\n",
            "Epoch 64/70\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.4164 - accuracy: 0.8029 - val_loss: 0.5344 - val_accuracy: 0.7532\n",
            "Epoch 65/70\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4166 - accuracy: 0.7948 - val_loss: 0.5353 - val_accuracy: 0.7468\n",
            "Epoch 66/70\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4158 - accuracy: 0.7964 - val_loss: 0.5352 - val_accuracy: 0.7597\n",
            "Epoch 67/70\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4153 - accuracy: 0.7997 - val_loss: 0.5351 - val_accuracy: 0.7597\n",
            "Epoch 68/70\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4147 - accuracy: 0.7997 - val_loss: 0.5364 - val_accuracy: 0.7597\n",
            "Epoch 69/70\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4146 - accuracy: 0.8013 - val_loss: 0.5368 - val_accuracy: 0.7662\n",
            "Epoch 70/70\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4137 - accuracy: 0.7980 - val_loss: 0.5381 - val_accuracy: 0.7597\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.src.callbacks.History at 0x7c99fd089fc0>"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "KerasTuner is an easy-to-use, scalable hyperparameter optimization framework that solves the pain points of hyperparameter search. Easily configure your search space with a define-by-run syntax, then leverage one of the available search algorithms to find the best hyperparameter values for your models. KerasTuner comes with Bayesian Optimization, Hyperband, and Random Search algorithms built-in, and is also designed to be easy for researchers to extend in order to experiment with new search algorithms."
      ],
      "metadata": {
        "id": "1TwSANUg5poH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "pip install -U keras-tuner"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "K1ZGg7J84ve2",
        "outputId": "d05050bf-807a-4728-ee0c-58bd99990f03"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting keras-tuner\n",
            "  Downloading keras_tuner-1.4.6-py3-none-any.whl (128 kB)\n",
            "\u001b[?25l     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/128.9 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K     \u001b[91m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[90m╺\u001b[0m\u001b[90m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m61.4/128.9 kB\u001b[0m \u001b[31m1.7 MB/s\u001b[0m eta \u001b[36m0:00:01\u001b[0m\r\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m128.9/128.9 kB\u001b[0m \u001b[31m2.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: keras in /usr/local/lib/python3.10/dist-packages (from keras-tuner) (2.15.0)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from keras-tuner) (23.2)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from keras-tuner) (2.31.0)\n",
            "Collecting kt-legacy (from keras-tuner)\n",
            "  Downloading kt_legacy-1.0.5-py3-none-any.whl (9.6 kB)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->keras-tuner) (3.3.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->keras-tuner) (3.6)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->keras-tuner) (2.0.7)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->keras-tuner) (2023.11.17)\n",
            "Installing collected packages: kt-legacy, keras-tuner\n",
            "Successfully installed keras-tuner-1.4.6 kt-legacy-1.0.5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import keras_tuner as kt"
      ],
      "metadata": {
        "id": "lQLOY6cY5vdd"
      },
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def build_model(hp):\n",
        "  model = Sequential()\n",
        "\n",
        "  # Here we are not trying to find optimized number of neurons or hidden layers, in this particular example we are only trying to find best optimizer\n",
        "\n",
        "  model.add(Dense(32,activation='relu',input_dim=8))\n",
        "  model.add(Dense(1,activation='sigmoid'))\n",
        "\n",
        "  optimizer = hp.Choice('optimizer',values = ['Adam', 'SGD', 'rmsprop', 'adadelta'])\n",
        "\n",
        "  model.compile(optimizer= optimizer, loss='binary_crossentropy', metrics=['accuracy'])\n",
        "\n",
        "  return model\n",
        "\n",
        "  # THis code will train 4 models, each with 2 layers and optimizer and will return best model"
      ],
      "metadata": {
        "id": "AZ4ULPHz6A-9"
      },
      "execution_count": 34,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# RandomSearch is a class and it behaves like GridSearchCV\n",
        "\n",
        "tuner = kt.RandomSearch(build_model,\n",
        "                        objective='val_accuracy',\n",
        "                        max_trials=5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gm5SSu2DzmJ0",
        "outputId": "a301c5da-0cb1-4490-a835-07c3cf473e4b"
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Reloading Tuner from ./untitled_project/tuner0.json\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "tuner.search(x_train,y_train,epochs=5,validation_data=(x_test,y_test))"
      ],
      "metadata": {
        "id": "RX5ZEN26z3LA"
      },
      "execution_count": 36,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "tuner.get_best_hyperparameters()\n",
        "# return object"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QG_tLANj0lS5",
        "outputId": "97187446-1dfa-4bf6-ec64-4bbd6b42916b"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<keras_tuner.src.engine.hyperparameters.hyperparameters.HyperParameters at 0x7c99f87af0d0>]"
            ]
          },
          "metadata": {},
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "tuner.get_best_hyperparameters()[0].values"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UJ-R1mBv06qN",
        "outputId": "b5b437a0-484d-4e9d-8698-c308ba34dc7a"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'optimizer': 'rmsprop'}"
            ]
          },
          "metadata": {},
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# TO get best model\n",
        "\n",
        "model = tuner.get_best_models(num_models=1)[0]"
      ],
      "metadata": {
        "id": "3rbYPWrn1Df9"
      },
      "execution_count": 39,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model.summary()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1yLugaie1ivf",
        "outputId": "27ad2ed5-d23b-4339-fe2a-2820a35be2bd"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " dense (Dense)               (None, 32)                288       \n",
            "                                                                 \n",
            " dense_1 (Dense)             (None, 1)                 33        \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 321 (1.25 KB)\n",
            "Trainable params: 321 (1.25 KB)\n",
            "Non-trainable params: 0 (0.00 Byte)\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model.fit(x_train,y_train,batch_size=32,epochs=150,initial_epoch=6,validation_data=(x_test,y_test))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "35615Dap1lge",
        "outputId": "57ae4605-6dcb-4b71-d397-f7ff8be98f0f"
      },
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 7/150\n",
            "20/20 [==============================] - 1s 20ms/step - loss: 0.5260 - accuracy: 0.7476 - val_loss: 0.5425 - val_accuracy: 0.7403\n",
            "Epoch 8/150\n",
            "20/20 [==============================] - 0s 7ms/step - loss: 0.5134 - accuracy: 0.7459 - val_loss: 0.5330 - val_accuracy: 0.7338\n",
            "Epoch 9/150\n",
            "20/20 [==============================] - 0s 6ms/step - loss: 0.5017 - accuracy: 0.7573 - val_loss: 0.5254 - val_accuracy: 0.7403\n",
            "Epoch 10/150\n",
            "20/20 [==============================] - 0s 8ms/step - loss: 0.4930 - accuracy: 0.7606 - val_loss: 0.5191 - val_accuracy: 0.7468\n",
            "Epoch 11/150\n",
            "20/20 [==============================] - 0s 6ms/step - loss: 0.4854 - accuracy: 0.7638 - val_loss: 0.5152 - val_accuracy: 0.7597\n",
            "Epoch 12/150\n",
            "20/20 [==============================] - 0s 6ms/step - loss: 0.4793 - accuracy: 0.7638 - val_loss: 0.5123 - val_accuracy: 0.7597\n",
            "Epoch 13/150\n",
            "20/20 [==============================] - 0s 8ms/step - loss: 0.4742 - accuracy: 0.7704 - val_loss: 0.5110 - val_accuracy: 0.7597\n",
            "Epoch 14/150\n",
            "20/20 [==============================] - 0s 7ms/step - loss: 0.4700 - accuracy: 0.7704 - val_loss: 0.5092 - val_accuracy: 0.7532\n",
            "Epoch 15/150\n",
            "20/20 [==============================] - 0s 6ms/step - loss: 0.4663 - accuracy: 0.7769 - val_loss: 0.5093 - val_accuracy: 0.7597\n",
            "Epoch 16/150\n",
            "20/20 [==============================] - 0s 7ms/step - loss: 0.4633 - accuracy: 0.7736 - val_loss: 0.5089 - val_accuracy: 0.7597\n",
            "Epoch 17/150\n",
            "20/20 [==============================] - 0s 7ms/step - loss: 0.4603 - accuracy: 0.7785 - val_loss: 0.5085 - val_accuracy: 0.7597\n",
            "Epoch 18/150\n",
            "20/20 [==============================] - 0s 7ms/step - loss: 0.4582 - accuracy: 0.7785 - val_loss: 0.5080 - val_accuracy: 0.7597\n",
            "Epoch 19/150\n",
            "20/20 [==============================] - 0s 6ms/step - loss: 0.4553 - accuracy: 0.7801 - val_loss: 0.5073 - val_accuracy: 0.7597\n",
            "Epoch 20/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4537 - accuracy: 0.7769 - val_loss: 0.5081 - val_accuracy: 0.7662\n",
            "Epoch 21/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4515 - accuracy: 0.7785 - val_loss: 0.5089 - val_accuracy: 0.7597\n",
            "Epoch 22/150\n",
            "20/20 [==============================] - 0s 6ms/step - loss: 0.4503 - accuracy: 0.7801 - val_loss: 0.5103 - val_accuracy: 0.7597\n",
            "Epoch 23/150\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.4486 - accuracy: 0.7834 - val_loss: 0.5104 - val_accuracy: 0.7597\n",
            "Epoch 24/150\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.4474 - accuracy: 0.7801 - val_loss: 0.5115 - val_accuracy: 0.7597\n",
            "Epoch 25/150\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.4464 - accuracy: 0.7834 - val_loss: 0.5139 - val_accuracy: 0.7597\n",
            "Epoch 26/150\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.4451 - accuracy: 0.7818 - val_loss: 0.5128 - val_accuracy: 0.7597\n",
            "Epoch 27/150\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.4441 - accuracy: 0.7866 - val_loss: 0.5138 - val_accuracy: 0.7597\n",
            "Epoch 28/150\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.4429 - accuracy: 0.7899 - val_loss: 0.5148 - val_accuracy: 0.7597\n",
            "Epoch 29/150\n",
            "20/20 [==============================] - 0s 6ms/step - loss: 0.4422 - accuracy: 0.7850 - val_loss: 0.5169 - val_accuracy: 0.7597\n",
            "Epoch 30/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4411 - accuracy: 0.7866 - val_loss: 0.5166 - val_accuracy: 0.7597\n",
            "Epoch 31/150\n",
            "20/20 [==============================] - 0s 3ms/step - loss: 0.4403 - accuracy: 0.7850 - val_loss: 0.5185 - val_accuracy: 0.7597\n",
            "Epoch 32/150\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.4390 - accuracy: 0.7834 - val_loss: 0.5202 - val_accuracy: 0.7597\n",
            "Epoch 33/150\n",
            "20/20 [==============================] - 0s 3ms/step - loss: 0.4386 - accuracy: 0.7850 - val_loss: 0.5214 - val_accuracy: 0.7597\n",
            "Epoch 34/150\n",
            "20/20 [==============================] - 0s 3ms/step - loss: 0.4377 - accuracy: 0.7850 - val_loss: 0.5229 - val_accuracy: 0.7597\n",
            "Epoch 35/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4370 - accuracy: 0.7866 - val_loss: 0.5228 - val_accuracy: 0.7597\n",
            "Epoch 36/150\n",
            "20/20 [==============================] - 0s 3ms/step - loss: 0.4357 - accuracy: 0.7866 - val_loss: 0.5233 - val_accuracy: 0.7597\n",
            "Epoch 37/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4354 - accuracy: 0.7883 - val_loss: 0.5238 - val_accuracy: 0.7597\n",
            "Epoch 38/150\n",
            "20/20 [==============================] - 0s 3ms/step - loss: 0.4349 - accuracy: 0.7899 - val_loss: 0.5258 - val_accuracy: 0.7597\n",
            "Epoch 39/150\n",
            "20/20 [==============================] - 0s 3ms/step - loss: 0.4339 - accuracy: 0.7915 - val_loss: 0.5262 - val_accuracy: 0.7532\n",
            "Epoch 40/150\n",
            "20/20 [==============================] - 0s 3ms/step - loss: 0.4336 - accuracy: 0.7899 - val_loss: 0.5260 - val_accuracy: 0.7532\n",
            "Epoch 41/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4330 - accuracy: 0.7915 - val_loss: 0.5257 - val_accuracy: 0.7597\n",
            "Epoch 42/150\n",
            "20/20 [==============================] - 0s 3ms/step - loss: 0.4324 - accuracy: 0.7883 - val_loss: 0.5260 - val_accuracy: 0.7532\n",
            "Epoch 43/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4320 - accuracy: 0.7834 - val_loss: 0.5267 - val_accuracy: 0.7532\n",
            "Epoch 44/150\n",
            "20/20 [==============================] - 0s 3ms/step - loss: 0.4316 - accuracy: 0.7850 - val_loss: 0.5288 - val_accuracy: 0.7532\n",
            "Epoch 45/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4307 - accuracy: 0.7834 - val_loss: 0.5307 - val_accuracy: 0.7468\n",
            "Epoch 46/150\n",
            "20/20 [==============================] - 0s 3ms/step - loss: 0.4302 - accuracy: 0.7915 - val_loss: 0.5300 - val_accuracy: 0.7532\n",
            "Epoch 47/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4297 - accuracy: 0.7883 - val_loss: 0.5309 - val_accuracy: 0.7532\n",
            "Epoch 48/150\n",
            "20/20 [==============================] - 0s 3ms/step - loss: 0.4294 - accuracy: 0.7932 - val_loss: 0.5311 - val_accuracy: 0.7532\n",
            "Epoch 49/150\n",
            "20/20 [==============================] - 0s 3ms/step - loss: 0.4290 - accuracy: 0.7883 - val_loss: 0.5298 - val_accuracy: 0.7468\n",
            "Epoch 50/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4283 - accuracy: 0.7899 - val_loss: 0.5310 - val_accuracy: 0.7468\n",
            "Epoch 51/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4276 - accuracy: 0.7932 - val_loss: 0.5312 - val_accuracy: 0.7468\n",
            "Epoch 52/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4275 - accuracy: 0.7948 - val_loss: 0.5311 - val_accuracy: 0.7468\n",
            "Epoch 53/150\n",
            "20/20 [==============================] - 0s 3ms/step - loss: 0.4269 - accuracy: 0.7883 - val_loss: 0.5310 - val_accuracy: 0.7468\n",
            "Epoch 54/150\n",
            "20/20 [==============================] - 0s 3ms/step - loss: 0.4263 - accuracy: 0.7866 - val_loss: 0.5332 - val_accuracy: 0.7468\n",
            "Epoch 55/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4265 - accuracy: 0.7883 - val_loss: 0.5324 - val_accuracy: 0.7468\n",
            "Epoch 56/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4255 - accuracy: 0.7997 - val_loss: 0.5323 - val_accuracy: 0.7468\n",
            "Epoch 57/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4251 - accuracy: 0.7915 - val_loss: 0.5337 - val_accuracy: 0.7468\n",
            "Epoch 58/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4249 - accuracy: 0.7915 - val_loss: 0.5340 - val_accuracy: 0.7468\n",
            "Epoch 59/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4240 - accuracy: 0.7932 - val_loss: 0.5330 - val_accuracy: 0.7468\n",
            "Epoch 60/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4241 - accuracy: 0.7932 - val_loss: 0.5331 - val_accuracy: 0.7468\n",
            "Epoch 61/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4235 - accuracy: 0.7932 - val_loss: 0.5356 - val_accuracy: 0.7403\n",
            "Epoch 62/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4229 - accuracy: 0.7932 - val_loss: 0.5354 - val_accuracy: 0.7468\n",
            "Epoch 63/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4228 - accuracy: 0.7866 - val_loss: 0.5361 - val_accuracy: 0.7403\n",
            "Epoch 64/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4222 - accuracy: 0.7899 - val_loss: 0.5350 - val_accuracy: 0.7403\n",
            "Epoch 65/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4219 - accuracy: 0.7948 - val_loss: 0.5355 - val_accuracy: 0.7468\n",
            "Epoch 66/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4216 - accuracy: 0.7915 - val_loss: 0.5357 - val_accuracy: 0.7468\n",
            "Epoch 67/150\n",
            "20/20 [==============================] - 0s 3ms/step - loss: 0.4213 - accuracy: 0.7932 - val_loss: 0.5352 - val_accuracy: 0.7468\n",
            "Epoch 68/150\n",
            "20/20 [==============================] - 0s 3ms/step - loss: 0.4207 - accuracy: 0.7915 - val_loss: 0.5351 - val_accuracy: 0.7403\n",
            "Epoch 69/150\n",
            "20/20 [==============================] - 0s 3ms/step - loss: 0.4204 - accuracy: 0.7899 - val_loss: 0.5352 - val_accuracy: 0.7468\n",
            "Epoch 70/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4199 - accuracy: 0.7915 - val_loss: 0.5353 - val_accuracy: 0.7468\n",
            "Epoch 71/150\n",
            "20/20 [==============================] - 0s 3ms/step - loss: 0.4196 - accuracy: 0.7932 - val_loss: 0.5355 - val_accuracy: 0.7403\n",
            "Epoch 72/150\n",
            "20/20 [==============================] - 0s 3ms/step - loss: 0.4193 - accuracy: 0.7899 - val_loss: 0.5356 - val_accuracy: 0.7338\n",
            "Epoch 73/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4186 - accuracy: 0.7883 - val_loss: 0.5354 - val_accuracy: 0.7338\n",
            "Epoch 74/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4184 - accuracy: 0.7899 - val_loss: 0.5351 - val_accuracy: 0.7338\n",
            "Epoch 75/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4180 - accuracy: 0.7883 - val_loss: 0.5353 - val_accuracy: 0.7403\n",
            "Epoch 76/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4185 - accuracy: 0.7948 - val_loss: 0.5356 - val_accuracy: 0.7403\n",
            "Epoch 77/150\n",
            "20/20 [==============================] - 0s 3ms/step - loss: 0.4175 - accuracy: 0.7980 - val_loss: 0.5358 - val_accuracy: 0.7403\n",
            "Epoch 78/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4170 - accuracy: 0.7964 - val_loss: 0.5355 - val_accuracy: 0.7273\n",
            "Epoch 79/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4168 - accuracy: 0.7915 - val_loss: 0.5355 - val_accuracy: 0.7273\n",
            "Epoch 80/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4161 - accuracy: 0.7899 - val_loss: 0.5379 - val_accuracy: 0.7273\n",
            "Epoch 81/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4157 - accuracy: 0.7932 - val_loss: 0.5374 - val_accuracy: 0.7338\n",
            "Epoch 82/150\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.4156 - accuracy: 0.7948 - val_loss: 0.5384 - val_accuracy: 0.7273\n",
            "Epoch 83/150\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.4149 - accuracy: 0.7915 - val_loss: 0.5380 - val_accuracy: 0.7273\n",
            "Epoch 84/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4145 - accuracy: 0.7915 - val_loss: 0.5371 - val_accuracy: 0.7338\n",
            "Epoch 85/150\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.4140 - accuracy: 0.7948 - val_loss: 0.5363 - val_accuracy: 0.7338\n",
            "Epoch 86/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4137 - accuracy: 0.7899 - val_loss: 0.5366 - val_accuracy: 0.7338\n",
            "Epoch 87/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4133 - accuracy: 0.7932 - val_loss: 0.5375 - val_accuracy: 0.7338\n",
            "Epoch 88/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4130 - accuracy: 0.7964 - val_loss: 0.5367 - val_accuracy: 0.7338\n",
            "Epoch 89/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4126 - accuracy: 0.7980 - val_loss: 0.5377 - val_accuracy: 0.7338\n",
            "Epoch 90/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4123 - accuracy: 0.7980 - val_loss: 0.5371 - val_accuracy: 0.7338\n",
            "Epoch 91/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4117 - accuracy: 0.7980 - val_loss: 0.5354 - val_accuracy: 0.7338\n",
            "Epoch 92/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4118 - accuracy: 0.7932 - val_loss: 0.5353 - val_accuracy: 0.7338\n",
            "Epoch 93/150\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.4110 - accuracy: 0.7980 - val_loss: 0.5360 - val_accuracy: 0.7338\n",
            "Epoch 94/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4107 - accuracy: 0.7932 - val_loss: 0.5367 - val_accuracy: 0.7338\n",
            "Epoch 95/150\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.4105 - accuracy: 0.7915 - val_loss: 0.5364 - val_accuracy: 0.7338\n",
            "Epoch 96/150\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.4104 - accuracy: 0.7948 - val_loss: 0.5375 - val_accuracy: 0.7338\n",
            "Epoch 97/150\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.4098 - accuracy: 0.7915 - val_loss: 0.5379 - val_accuracy: 0.7338\n",
            "Epoch 98/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4097 - accuracy: 0.7932 - val_loss: 0.5393 - val_accuracy: 0.7273\n",
            "Epoch 99/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4090 - accuracy: 0.7915 - val_loss: 0.5404 - val_accuracy: 0.7273\n",
            "Epoch 100/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4090 - accuracy: 0.7980 - val_loss: 0.5412 - val_accuracy: 0.7273\n",
            "Epoch 101/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4087 - accuracy: 0.7915 - val_loss: 0.5419 - val_accuracy: 0.7273\n",
            "Epoch 102/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4083 - accuracy: 0.7948 - val_loss: 0.5415 - val_accuracy: 0.7273\n",
            "Epoch 103/150\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.4082 - accuracy: 0.7964 - val_loss: 0.5414 - val_accuracy: 0.7273\n",
            "Epoch 104/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4076 - accuracy: 0.7948 - val_loss: 0.5412 - val_accuracy: 0.7273\n",
            "Epoch 105/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4073 - accuracy: 0.7964 - val_loss: 0.5402 - val_accuracy: 0.7273\n",
            "Epoch 106/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4067 - accuracy: 0.7964 - val_loss: 0.5417 - val_accuracy: 0.7338\n",
            "Epoch 107/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4066 - accuracy: 0.7980 - val_loss: 0.5409 - val_accuracy: 0.7338\n",
            "Epoch 108/150\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.4062 - accuracy: 0.7980 - val_loss: 0.5405 - val_accuracy: 0.7338\n",
            "Epoch 109/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4063 - accuracy: 0.7980 - val_loss: 0.5398 - val_accuracy: 0.7403\n",
            "Epoch 110/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4056 - accuracy: 0.7980 - val_loss: 0.5436 - val_accuracy: 0.7273\n",
            "Epoch 111/150\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.4049 - accuracy: 0.7997 - val_loss: 0.5434 - val_accuracy: 0.7273\n",
            "Epoch 112/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4052 - accuracy: 0.7948 - val_loss: 0.5441 - val_accuracy: 0.7338\n",
            "Epoch 113/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4043 - accuracy: 0.8013 - val_loss: 0.5420 - val_accuracy: 0.7338\n",
            "Epoch 114/150\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.4041 - accuracy: 0.7997 - val_loss: 0.5415 - val_accuracy: 0.7338\n",
            "Epoch 115/150\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.4034 - accuracy: 0.7948 - val_loss: 0.5415 - val_accuracy: 0.7273\n",
            "Epoch 116/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4035 - accuracy: 0.7964 - val_loss: 0.5418 - val_accuracy: 0.7273\n",
            "Epoch 117/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4032 - accuracy: 0.7980 - val_loss: 0.5435 - val_accuracy: 0.7403\n",
            "Epoch 118/150\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.4028 - accuracy: 0.8029 - val_loss: 0.5443 - val_accuracy: 0.7273\n",
            "Epoch 119/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4023 - accuracy: 0.8013 - val_loss: 0.5456 - val_accuracy: 0.7273\n",
            "Epoch 120/150\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.4025 - accuracy: 0.8029 - val_loss: 0.5451 - val_accuracy: 0.7273\n",
            "Epoch 121/150\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.4022 - accuracy: 0.7980 - val_loss: 0.5456 - val_accuracy: 0.7338\n",
            "Epoch 122/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4015 - accuracy: 0.8029 - val_loss: 0.5455 - val_accuracy: 0.7338\n",
            "Epoch 123/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4013 - accuracy: 0.8062 - val_loss: 0.5450 - val_accuracy: 0.7338\n",
            "Epoch 124/150\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.4012 - accuracy: 0.8062 - val_loss: 0.5450 - val_accuracy: 0.7273\n",
            "Epoch 125/150\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.4008 - accuracy: 0.8029 - val_loss: 0.5443 - val_accuracy: 0.7403\n",
            "Epoch 126/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4002 - accuracy: 0.8029 - val_loss: 0.5446 - val_accuracy: 0.7403\n",
            "Epoch 127/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.3998 - accuracy: 0.7997 - val_loss: 0.5457 - val_accuracy: 0.7338\n",
            "Epoch 128/150\n",
            "20/20 [==============================] - 0s 3ms/step - loss: 0.4000 - accuracy: 0.7997 - val_loss: 0.5468 - val_accuracy: 0.7208\n",
            "Epoch 129/150\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.3997 - accuracy: 0.8029 - val_loss: 0.5486 - val_accuracy: 0.7273\n",
            "Epoch 130/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.3993 - accuracy: 0.8078 - val_loss: 0.5470 - val_accuracy: 0.7338\n",
            "Epoch 131/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.3987 - accuracy: 0.8013 - val_loss: 0.5468 - val_accuracy: 0.7208\n",
            "Epoch 132/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.3989 - accuracy: 0.8062 - val_loss: 0.5450 - val_accuracy: 0.7468\n",
            "Epoch 133/150\n",
            "20/20 [==============================] - 0s 3ms/step - loss: 0.3983 - accuracy: 0.8046 - val_loss: 0.5469 - val_accuracy: 0.7208\n",
            "Epoch 134/150\n",
            "20/20 [==============================] - 0s 3ms/step - loss: 0.3977 - accuracy: 0.8078 - val_loss: 0.5454 - val_accuracy: 0.7403\n",
            "Epoch 135/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.3980 - accuracy: 0.8029 - val_loss: 0.5470 - val_accuracy: 0.7273\n",
            "Epoch 136/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.3977 - accuracy: 0.8029 - val_loss: 0.5470 - val_accuracy: 0.7208\n",
            "Epoch 137/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.3971 - accuracy: 0.8078 - val_loss: 0.5489 - val_accuracy: 0.7208\n",
            "Epoch 138/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.3970 - accuracy: 0.8062 - val_loss: 0.5469 - val_accuracy: 0.7403\n",
            "Epoch 139/150\n",
            "20/20 [==============================] - 0s 3ms/step - loss: 0.3966 - accuracy: 0.8062 - val_loss: 0.5462 - val_accuracy: 0.7468\n",
            "Epoch 140/150\n",
            "20/20 [==============================] - 0s 3ms/step - loss: 0.3968 - accuracy: 0.8046 - val_loss: 0.5464 - val_accuracy: 0.7468\n",
            "Epoch 141/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.3965 - accuracy: 0.8078 - val_loss: 0.5454 - val_accuracy: 0.7403\n",
            "Epoch 142/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.3962 - accuracy: 0.8029 - val_loss: 0.5450 - val_accuracy: 0.7403\n",
            "Epoch 143/150\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.3956 - accuracy: 0.8029 - val_loss: 0.5463 - val_accuracy: 0.7403\n",
            "Epoch 144/150\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.3951 - accuracy: 0.8094 - val_loss: 0.5478 - val_accuracy: 0.7403\n",
            "Epoch 145/150\n",
            "20/20 [==============================] - 0s 6ms/step - loss: 0.3957 - accuracy: 0.8094 - val_loss: 0.5476 - val_accuracy: 0.7403\n",
            "Epoch 146/150\n",
            "20/20 [==============================] - 0s 7ms/step - loss: 0.3948 - accuracy: 0.8094 - val_loss: 0.5472 - val_accuracy: 0.7403\n",
            "Epoch 147/150\n",
            "20/20 [==============================] - 0s 7ms/step - loss: 0.3949 - accuracy: 0.8046 - val_loss: 0.5461 - val_accuracy: 0.7403\n",
            "Epoch 148/150\n",
            "20/20 [==============================] - 0s 6ms/step - loss: 0.3947 - accuracy: 0.8094 - val_loss: 0.5470 - val_accuracy: 0.7338\n",
            "Epoch 149/150\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.3942 - accuracy: 0.8046 - val_loss: 0.5478 - val_accuracy: 0.7338\n",
            "Epoch 150/150\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.3942 - accuracy: 0.8078 - val_loss: 0.5481 - val_accuracy: 0.7338\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.src.callbacks.History at 0x7c99f862c280>"
            ]
          },
          "metadata": {},
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# For getting number of neurons\n",
        "\n",
        "def build_model(hp):\n",
        "  model = Sequential()\n",
        "\n",
        "  units = hp.Int('units',min_value=8,max_value=128,step=8)\n",
        "\n",
        "  model.add(Dense(units=units, activation='relu', input_dim = 8))\n",
        "  model.add(Dense(1,activation='sigmoid'))\n",
        "\n",
        "  model.compile(optimizer='rmsprop',loss='binary_crossentropy',metrics=['accuracy'])\n",
        "\n",
        "  return model"
      ],
      "metadata": {
        "id": "cgYMDJny18NI"
      },
      "execution_count": 58,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "tuner = kt.RandomSearch(build_model,\n",
        "                        objective=\"val_accuracy\",\n",
        "                        max_trials=5,\n",
        "                        directory='mtdir')"
      ],
      "metadata": {
        "id": "5gUPv96_9HAO"
      },
      "execution_count": 59,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "tuner.search(x_train,y_train,epochs=5,validation_data=(x_test,y_test))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CZve0yS79ruD",
        "outputId": "4e046899-789d-43f6-f3e4-b7eec2252792"
      },
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Trial 5 Complete [00h 00m 02s]\n",
            "val_accuracy: 0.7532467246055603\n",
            "\n",
            "Best val_accuracy So Far: 0.7922077775001526\n",
            "Total elapsed time: 00h 00m 10s\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "tuner.get_best_hyperparameters()[0].values"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5-oWlFVa97_N",
        "outputId": "78c43f58-e25d-49ca-ccc9-aa1bc83a5eac"
      },
      "execution_count": 61,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'units': 32}"
            ]
          },
          "metadata": {},
          "execution_count": 61
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# How to select number of layers\n",
        "\n",
        "def build_model(hp):\n",
        "  model = Sequential()\n",
        "\n",
        "  model.add(Dense(72,activation='relu',input_dim=8))\n",
        "  for i in range(hp.Int('num_layers',min_value=1,max_value=10)):\n",
        "    model.add(Dense(72,activation='relu'))\n",
        "\n",
        "  model.add(Dense(1,activation='sigmoid'))\n",
        "\n",
        "  model.compile(optimizer='rmsprop',loss='binary_crossentropy',metrics=['accuracy'])\n",
        "\n",
        "  return model"
      ],
      "metadata": {
        "id": "1UH2Y-wj_JDm"
      },
      "execution_count": 62,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "tuner = kt.RandomSearch(build_model,\n",
        "                        objective='val_accuracy',\n",
        "                        max_trials=5,\n",
        "                        directory='layer')"
      ],
      "metadata": {
        "id": "xTwxNCmEDPt8"
      },
      "execution_count": 63,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "tuner.search(x_train,y_train,epochs=5,validation_data=[x_test,y_test])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PlDEvxR5DgIx",
        "outputId": "fb5865e3-2449-4fe9-eb41-47b156f4ea73"
      },
      "execution_count": 64,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Trial 5 Complete [00h 00m 03s]\n",
            "val_accuracy: 0.7922077775001526\n",
            "\n",
            "Best val_accuracy So Far: 0.7922077775001526\n",
            "Total elapsed time: 00h 00m 14s\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "tuner.get_best_hyperparameters()[0].values"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Z0QFJniiDqb8",
        "outputId": "01984191-8ebe-49e7-d90e-11593b404658"
      },
      "execution_count": 65,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'num_layers': 3}"
            ]
          },
          "metadata": {},
          "execution_count": 65
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model = tuner.get_best_models(num_models=1)[0]"
      ],
      "metadata": {
        "id": "4KMPzIHGD2Jd"
      },
      "execution_count": 66,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model.fit(x_train,y_train,epochs=100,initial_epoch=6,validation_data=[x_test,y_test])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UM5FYPkvEItT",
        "outputId": "b8bf7e49-60ca-4ae2-f344-1ce5a3690191"
      },
      "execution_count": 67,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 7/100\n",
            "20/20 [==============================] - 1s 15ms/step - loss: 0.4953 - accuracy: 0.7590 - val_loss: 0.5080 - val_accuracy: 0.7857\n",
            "Epoch 8/100\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4685 - accuracy: 0.7687 - val_loss: 0.5219 - val_accuracy: 0.7727\n",
            "Epoch 9/100\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4476 - accuracy: 0.7801 - val_loss: 0.5251 - val_accuracy: 0.7597\n",
            "Epoch 10/100\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.4407 - accuracy: 0.8062 - val_loss: 0.5263 - val_accuracy: 0.7792\n",
            "Epoch 11/100\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.4341 - accuracy: 0.7866 - val_loss: 0.5265 - val_accuracy: 0.7468\n",
            "Epoch 12/100\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.4224 - accuracy: 0.8013 - val_loss: 0.5280 - val_accuracy: 0.7857\n",
            "Epoch 13/100\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.4174 - accuracy: 0.7769 - val_loss: 0.5248 - val_accuracy: 0.7403\n",
            "Epoch 14/100\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.4105 - accuracy: 0.8029 - val_loss: 0.5435 - val_accuracy: 0.7662\n",
            "Epoch 15/100\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.3973 - accuracy: 0.8111 - val_loss: 0.5597 - val_accuracy: 0.7792\n",
            "Epoch 16/100\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.4002 - accuracy: 0.8094 - val_loss: 0.5686 - val_accuracy: 0.7597\n",
            "Epoch 17/100\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.3923 - accuracy: 0.8062 - val_loss: 0.5689 - val_accuracy: 0.7857\n",
            "Epoch 18/100\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.3919 - accuracy: 0.8062 - val_loss: 0.6157 - val_accuracy: 0.7662\n",
            "Epoch 19/100\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.3798 - accuracy: 0.8241 - val_loss: 0.5583 - val_accuracy: 0.7597\n",
            "Epoch 20/100\n",
            "20/20 [==============================] - 0s 6ms/step - loss: 0.3717 - accuracy: 0.8355 - val_loss: 0.5916 - val_accuracy: 0.7403\n",
            "Epoch 21/100\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.3743 - accuracy: 0.8192 - val_loss: 0.5668 - val_accuracy: 0.7403\n",
            "Epoch 22/100\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.3663 - accuracy: 0.8257 - val_loss: 0.5945 - val_accuracy: 0.7208\n",
            "Epoch 23/100\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.3525 - accuracy: 0.8404 - val_loss: 0.6470 - val_accuracy: 0.7078\n",
            "Epoch 24/100\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.3550 - accuracy: 0.8322 - val_loss: 0.6228 - val_accuracy: 0.6883\n",
            "Epoch 25/100\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.3408 - accuracy: 0.8420 - val_loss: 0.6584 - val_accuracy: 0.7403\n",
            "Epoch 26/100\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.3403 - accuracy: 0.8436 - val_loss: 0.6209 - val_accuracy: 0.7143\n",
            "Epoch 27/100\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.3327 - accuracy: 0.8371 - val_loss: 0.6186 - val_accuracy: 0.7338\n",
            "Epoch 28/100\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.3253 - accuracy: 0.8469 - val_loss: 0.6233 - val_accuracy: 0.7403\n",
            "Epoch 29/100\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.3211 - accuracy: 0.8567 - val_loss: 0.7038 - val_accuracy: 0.7273\n",
            "Epoch 30/100\n",
            "20/20 [==============================] - 0s 6ms/step - loss: 0.3090 - accuracy: 0.8762 - val_loss: 0.6520 - val_accuracy: 0.7338\n",
            "Epoch 31/100\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.2990 - accuracy: 0.8583 - val_loss: 0.6839 - val_accuracy: 0.7273\n",
            "Epoch 32/100\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.2897 - accuracy: 0.8730 - val_loss: 0.7038 - val_accuracy: 0.7143\n",
            "Epoch 33/100\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.2902 - accuracy: 0.8648 - val_loss: 0.7653 - val_accuracy: 0.7338\n",
            "Epoch 34/100\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.2837 - accuracy: 0.8827 - val_loss: 0.8128 - val_accuracy: 0.7273\n",
            "Epoch 35/100\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.2739 - accuracy: 0.8909 - val_loss: 0.7951 - val_accuracy: 0.6948\n",
            "Epoch 36/100\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.2672 - accuracy: 0.8844 - val_loss: 0.7895 - val_accuracy: 0.7013\n",
            "Epoch 37/100\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.2600 - accuracy: 0.8925 - val_loss: 0.8161 - val_accuracy: 0.7078\n",
            "Epoch 38/100\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.2641 - accuracy: 0.8974 - val_loss: 0.8103 - val_accuracy: 0.7013\n",
            "Epoch 39/100\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.2429 - accuracy: 0.9088 - val_loss: 0.8314 - val_accuracy: 0.7078\n",
            "Epoch 40/100\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.2469 - accuracy: 0.9007 - val_loss: 0.8768 - val_accuracy: 0.7013\n",
            "Epoch 41/100\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.2274 - accuracy: 0.9104 - val_loss: 0.9468 - val_accuracy: 0.7468\n",
            "Epoch 42/100\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.2337 - accuracy: 0.9104 - val_loss: 0.9647 - val_accuracy: 0.7143\n",
            "Epoch 43/100\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.2203 - accuracy: 0.9186 - val_loss: 0.8800 - val_accuracy: 0.7208\n",
            "Epoch 44/100\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.2045 - accuracy: 0.9251 - val_loss: 0.8897 - val_accuracy: 0.7078\n",
            "Epoch 45/100\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.2019 - accuracy: 0.9169 - val_loss: 1.0233 - val_accuracy: 0.7338\n",
            "Epoch 46/100\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.2017 - accuracy: 0.9137 - val_loss: 1.0080 - val_accuracy: 0.6948\n",
            "Epoch 47/100\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.1920 - accuracy: 0.9251 - val_loss: 1.0124 - val_accuracy: 0.6818\n",
            "Epoch 48/100\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.1857 - accuracy: 0.9365 - val_loss: 1.1354 - val_accuracy: 0.6818\n",
            "Epoch 49/100\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.1790 - accuracy: 0.9349 - val_loss: 1.0861 - val_accuracy: 0.6623\n",
            "Epoch 50/100\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.1695 - accuracy: 0.9446 - val_loss: 1.0942 - val_accuracy: 0.6753\n",
            "Epoch 51/100\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.1698 - accuracy: 0.9430 - val_loss: 1.1573 - val_accuracy: 0.6883\n",
            "Epoch 52/100\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.1467 - accuracy: 0.9544 - val_loss: 1.2003 - val_accuracy: 0.6753\n",
            "Epoch 53/100\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.1541 - accuracy: 0.9365 - val_loss: 1.3103 - val_accuracy: 0.6753\n",
            "Epoch 54/100\n",
            "20/20 [==============================] - 0s 6ms/step - loss: 0.1434 - accuracy: 0.9381 - val_loss: 1.2986 - val_accuracy: 0.6753\n",
            "Epoch 55/100\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.1257 - accuracy: 0.9609 - val_loss: 1.2801 - val_accuracy: 0.6688\n",
            "Epoch 56/100\n",
            "20/20 [==============================] - 0s 6ms/step - loss: 0.1326 - accuracy: 0.9593 - val_loss: 1.3597 - val_accuracy: 0.6753\n",
            "Epoch 57/100\n",
            "20/20 [==============================] - 0s 6ms/step - loss: 0.1232 - accuracy: 0.9577 - val_loss: 1.5371 - val_accuracy: 0.7013\n",
            "Epoch 58/100\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.1232 - accuracy: 0.9609 - val_loss: 1.3661 - val_accuracy: 0.6883\n",
            "Epoch 59/100\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.1169 - accuracy: 0.9528 - val_loss: 1.4156 - val_accuracy: 0.6623\n",
            "Epoch 60/100\n",
            "20/20 [==============================] - 0s 6ms/step - loss: 0.1017 - accuracy: 0.9625 - val_loss: 1.5184 - val_accuracy: 0.6948\n",
            "Epoch 61/100\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.1286 - accuracy: 0.9511 - val_loss: 1.6556 - val_accuracy: 0.6883\n",
            "Epoch 62/100\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.1015 - accuracy: 0.9691 - val_loss: 1.6273 - val_accuracy: 0.6688\n",
            "Epoch 63/100\n",
            "20/20 [==============================] - 0s 6ms/step - loss: 0.0963 - accuracy: 0.9691 - val_loss: 1.6141 - val_accuracy: 0.6948\n",
            "Epoch 64/100\n",
            "20/20 [==============================] - 0s 8ms/step - loss: 0.0950 - accuracy: 0.9674 - val_loss: 1.6055 - val_accuracy: 0.6753\n",
            "Epoch 65/100\n",
            "20/20 [==============================] - 0s 8ms/step - loss: 0.0747 - accuracy: 0.9691 - val_loss: 1.6166 - val_accuracy: 0.6818\n",
            "Epoch 66/100\n",
            "20/20 [==============================] - 0s 8ms/step - loss: 0.0850 - accuracy: 0.9691 - val_loss: 1.6432 - val_accuracy: 0.7078\n",
            "Epoch 67/100\n",
            "20/20 [==============================] - 0s 7ms/step - loss: 0.0796 - accuracy: 0.9756 - val_loss: 1.7287 - val_accuracy: 0.6948\n",
            "Epoch 68/100\n",
            "20/20 [==============================] - 0s 7ms/step - loss: 0.0718 - accuracy: 0.9772 - val_loss: 1.9158 - val_accuracy: 0.6818\n",
            "Epoch 69/100\n",
            "20/20 [==============================] - 0s 6ms/step - loss: 0.0834 - accuracy: 0.9691 - val_loss: 1.8934 - val_accuracy: 0.6883\n",
            "Epoch 70/100\n",
            "20/20 [==============================] - 0s 6ms/step - loss: 0.0714 - accuracy: 0.9739 - val_loss: 1.9270 - val_accuracy: 0.6623\n",
            "Epoch 71/100\n",
            "20/20 [==============================] - 0s 7ms/step - loss: 0.0517 - accuracy: 0.9870 - val_loss: 1.9708 - val_accuracy: 0.6753\n",
            "Epoch 72/100\n",
            "20/20 [==============================] - 0s 7ms/step - loss: 0.0693 - accuracy: 0.9658 - val_loss: 2.0335 - val_accuracy: 0.6753\n",
            "Epoch 73/100\n",
            "20/20 [==============================] - 0s 8ms/step - loss: 0.0541 - accuracy: 0.9870 - val_loss: 2.0799 - val_accuracy: 0.6623\n",
            "Epoch 74/100\n",
            "20/20 [==============================] - 0s 8ms/step - loss: 0.0518 - accuracy: 0.9821 - val_loss: 2.0414 - val_accuracy: 0.6494\n",
            "Epoch 75/100\n",
            "20/20 [==============================] - 0s 8ms/step - loss: 0.0519 - accuracy: 0.9821 - val_loss: 2.1786 - val_accuracy: 0.6558\n",
            "Epoch 76/100\n",
            "20/20 [==============================] - 0s 9ms/step - loss: 0.0453 - accuracy: 0.9870 - val_loss: 2.2077 - val_accuracy: 0.7013\n",
            "Epoch 77/100\n",
            "20/20 [==============================] - 0s 8ms/step - loss: 0.0658 - accuracy: 0.9756 - val_loss: 2.2012 - val_accuracy: 0.7013\n",
            "Epoch 78/100\n",
            "20/20 [==============================] - 0s 8ms/step - loss: 0.0428 - accuracy: 0.9853 - val_loss: 2.3938 - val_accuracy: 0.6688\n",
            "Epoch 79/100\n",
            "20/20 [==============================] - 0s 7ms/step - loss: 0.0615 - accuracy: 0.9788 - val_loss: 2.1386 - val_accuracy: 0.6753\n",
            "Epoch 80/100\n",
            "20/20 [==============================] - 0s 8ms/step - loss: 0.0451 - accuracy: 0.9919 - val_loss: 2.4628 - val_accuracy: 0.6429\n",
            "Epoch 81/100\n",
            "20/20 [==============================] - 0s 8ms/step - loss: 0.0441 - accuracy: 0.9853 - val_loss: 2.2541 - val_accuracy: 0.6753\n",
            "Epoch 82/100\n",
            "20/20 [==============================] - 0s 8ms/step - loss: 0.0290 - accuracy: 0.9935 - val_loss: 2.4906 - val_accuracy: 0.6753\n",
            "Epoch 83/100\n",
            "20/20 [==============================] - 0s 7ms/step - loss: 0.0559 - accuracy: 0.9837 - val_loss: 2.4020 - val_accuracy: 0.6753\n",
            "Epoch 84/100\n",
            "20/20 [==============================] - 0s 8ms/step - loss: 0.0193 - accuracy: 0.9984 - val_loss: 2.4620 - val_accuracy: 0.6623\n",
            "Epoch 85/100\n",
            "20/20 [==============================] - 0s 10ms/step - loss: 0.0202 - accuracy: 0.9967 - val_loss: 2.5851 - val_accuracy: 0.6558\n",
            "Epoch 86/100\n",
            "20/20 [==============================] - 0s 6ms/step - loss: 0.0419 - accuracy: 0.9902 - val_loss: 2.7023 - val_accuracy: 0.6753\n",
            "Epoch 87/100\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.0302 - accuracy: 0.9902 - val_loss: 2.6418 - val_accuracy: 0.6883\n",
            "Epoch 88/100\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.0219 - accuracy: 0.9951 - val_loss: 2.7024 - val_accuracy: 0.6688\n",
            "Epoch 89/100\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.0368 - accuracy: 0.9837 - val_loss: 2.6769 - val_accuracy: 0.6753\n",
            "Epoch 90/100\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.0230 - accuracy: 0.9967 - val_loss: 2.9247 - val_accuracy: 0.6818\n",
            "Epoch 91/100\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.0309 - accuracy: 0.9886 - val_loss: 2.8877 - val_accuracy: 0.6688\n",
            "Epoch 92/100\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.0244 - accuracy: 0.9935 - val_loss: 2.7493 - val_accuracy: 0.6883\n",
            "Epoch 93/100\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.0138 - accuracy: 0.9951 - val_loss: 2.9374 - val_accuracy: 0.6753\n",
            "Epoch 94/100\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.0390 - accuracy: 0.9886 - val_loss: 3.0114 - val_accuracy: 0.6623\n",
            "Epoch 95/100\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.0151 - accuracy: 0.9951 - val_loss: 3.0015 - val_accuracy: 0.6948\n",
            "Epoch 96/100\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.0314 - accuracy: 0.9853 - val_loss: 2.8750 - val_accuracy: 0.6753\n",
            "Epoch 97/100\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.0115 - accuracy: 0.9984 - val_loss: 2.9378 - val_accuracy: 0.6688\n",
            "Epoch 98/100\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.0086 - accuracy: 1.0000 - val_loss: 2.9826 - val_accuracy: 0.6883\n",
            "Epoch 99/100\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.0447 - accuracy: 0.9853 - val_loss: 3.1210 - val_accuracy: 0.6818\n",
            "Epoch 100/100\n",
            "20/20 [==============================] - 0s 6ms/step - loss: 0.0203 - accuracy: 0.9919 - val_loss: 2.9920 - val_accuracy: 0.6818\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.src.callbacks.History at 0x7c99f8aa4fd0>"
            ]
          },
          "metadata": {},
          "execution_count": 67
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "TYSXdoVsERVv"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
